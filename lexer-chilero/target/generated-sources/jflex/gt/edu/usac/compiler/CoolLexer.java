// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simpletokenizer.lex

package gt.edu.usac.compiler;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int MULTI_COMMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\327\u0100\10\u0200\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\0"+
    "\1\3\5\0\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\12\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\0\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\24\1\31\1\32\2\24\1\33\1\34\1\35\1\36"+
    "\1\37\1\24\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\3\24\4\0\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\50\1\55\1\56\2\50\1\57\1\60"+
    "\1\61\1\62\1\63\1\50\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\3\50\1\72\1\0\1\73\1\74\u0181\0"+
    "\u0100\75";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\17\23\20\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\33\1\34\1\35\1\2\1\36"+
    "\1\37\1\40\3\23\1\41\1\23\1\42\1\23\1\43"+
    "\1\23\1\44\1\42\1\43\7\23\1\41\5\23\3\24"+
    "\1\41\1\24\1\42\2\24\1\43\1\24\1\44\1\42"+
    "\1\43\7\24\1\41\7\24\1\45\15\23\1\46\2\23"+
    "\1\47\1\50\6\23\16\24\1\46\2\24\1\47\1\50"+
    "\10\24\1\51\3\23\1\52\2\23\1\53\5\23\1\54"+
    "\4\23\1\55\1\56\1\23\1\51\3\24\1\52\2\24"+
    "\1\53\6\24\1\54\4\24\1\55\1\56\1\57\2\24"+
    "\1\60\11\23\1\61\1\60\4\24\1\62\6\24\1\61"+
    "\3\23\1\63\1\23\1\64\1\23\3\24\1\63\1\24"+
    "\1\64\2\24\4\23\5\24\1\23\2\24\1\23\1\24"+
    "\1\23\1\24\1\23\1\24\1\23\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\272\0\272\0\272\0\370"+
    "\0\272\0\u0136\0\272\0\272\0\u0174\0\272\0\272\0\u01b2"+
    "\0\272\0\272\0\u01f0\0\u022e\0\272\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\272\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\u09ee\0\272\0\272\0\u0a2c\0\272"+
    "\0\272\0\272\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u026c\0\u0c1c\0\u026c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u026c\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u060e\0\u11ae\0\u060e\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u060e"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\272"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u026c\0\u18f2\0\u1930"+
    "\0\u026c\0\u026c\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u060e\0\u1e46"+
    "\0\u1e84\0\u060e\0\u060e\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u2074\0\u026c\0\u20b2\0\u20f0\0\u212e\0\u026c"+
    "\0\u216c\0\u21aa\0\u026c\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u026c\0\u231e\0\u235c\0\u239a\0\u23d8\0\u026c\0\u026c\0\u2416"+
    "\0\u060e\0\u2454\0\u2492\0\u24d0\0\u060e\0\u250e\0\u254c\0\u060e"+
    "\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u060e\0\u26fe"+
    "\0\u273c\0\u277a\0\u27b8\0\u060e\0\u060e\0\u060e\0\u27f6\0\u2834"+
    "\0\u026c\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u026c\0\u060e\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u060e\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u060e"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u026c\0\u2dc6\0\u026c\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u060e\0\u2efc\0\u060e\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\4\1\25\2\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\26"+
    "\1\42\1\43\2\26\1\44\1\4\2\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\45\1\61\1\62\1\45\1\63\1\64\1\65"+
    "\1\66\1\67\1\4\2\70\1\71\1\72\72\70\2\73"+
    "\1\6\3\73\1\74\67\73\104\0\1\75\74\0\1\76"+
    "\101\0\1\77\100\0\1\20\72\0\1\100\6\0\1\101"+
    "\76\0\1\102\70\0\1\26\6\0\47\26\20\0\1\26"+
    "\6\0\1\103\6\26\1\104\1\105\13\26\1\103\6\26"+
    "\1\104\1\105\12\26\20\0\1\26\6\0\4\26\1\106"+
    "\23\26\1\106\16\26\20\0\1\26\6\0\10\26\1\107"+
    "\1\26\1\110\3\26\1\111\15\26\1\107\1\26\1\110"+
    "\3\26\1\111\4\26\20\0\1\26\6\0\7\26\1\112"+
    "\23\26\1\112\13\26\20\0\1\26\6\0\4\26\1\113"+
    "\23\26\1\113\16\26\20\0\1\26\6\0\5\26\1\114"+
    "\4\26\1\115\3\26\1\116\12\26\1\114\4\26\1\115"+
    "\3\26\1\116\4\26\20\0\1\26\6\0\1\117\3\26"+
    "\1\120\6\26\1\121\10\26\1\117\3\26\1\120\6\26"+
    "\1\121\7\26\20\0\1\26\6\0\7\26\1\122\23\26"+
    "\1\122\13\26\20\0\1\26\6\0\4\26\1\123\6\26"+
    "\1\124\4\26\1\125\7\26\1\123\6\26\1\124\4\26"+
    "\1\125\2\26\20\0\1\26\6\0\5\26\1\126\2\26"+
    "\1\127\5\26\1\130\12\26\1\126\2\26\1\127\5\26"+
    "\1\130\4\26\20\0\1\26\6\0\13\26\1\131\23\26"+
    "\1\131\7\26\20\0\1\26\6\0\7\26\1\114\23\26"+
    "\1\114\13\26\20\0\1\26\6\0\6\26\1\132\23\26"+
    "\1\132\14\26\20\0\1\26\6\0\6\26\1\133\23\26"+
    "\1\133\14\26\20\0\1\45\6\0\47\45\20\0\1\45"+
    "\6\0\1\134\6\45\1\135\1\136\13\45\1\134\6\45"+
    "\1\135\1\136\12\45\20\0\1\45\6\0\4\45\1\137"+
    "\23\45\1\137\16\45\20\0\1\45\6\0\10\45\1\140"+
    "\1\45\1\141\3\45\1\142\15\45\1\140\1\45\1\141"+
    "\3\45\1\142\4\45\20\0\1\45\6\0\1\143\6\45"+
    "\1\144\14\45\1\143\6\45\1\144\13\45\20\0\1\45"+
    "\6\0\4\45\1\145\23\45\1\145\16\45\20\0\1\45"+
    "\6\0\5\45\1\146\4\45\1\147\3\45\1\150\12\45"+
    "\1\146\4\45\1\147\3\45\1\150\4\45\20\0\1\45"+
    "\6\0\1\151\3\45\1\152\6\45\1\153\10\45\1\151"+
    "\3\45\1\152\6\45\1\153\7\45\20\0\1\45\6\0"+
    "\7\45\1\154\23\45\1\154\13\45\20\0\1\45\6\0"+
    "\4\45\1\155\6\45\1\156\4\45\1\157\7\45\1\155"+
    "\6\45\1\156\4\45\1\157\2\45\20\0\1\45\6\0"+
    "\5\45\1\160\2\45\1\161\5\45\1\162\12\45\1\160"+
    "\2\45\1\161\5\45\1\162\4\45\20\0\1\45\6\0"+
    "\13\45\1\163\23\45\1\163\7\45\20\0\1\45\6\0"+
    "\7\45\1\146\23\45\1\146\13\45\20\0\1\45\6\0"+
    "\6\45\1\164\6\45\1\165\14\45\1\164\6\45\1\165"+
    "\5\45\20\0\1\45\6\0\4\45\1\166\23\45\1\166"+
    "\16\45\20\0\1\45\6\0\6\45\1\167\23\45\1\167"+
    "\14\45\11\0\1\170\70\0\2\77\1\0\72\77\15\0"+
    "\1\26\6\0\16\26\1\171\23\26\1\171\4\26\20\0"+
    "\1\26\6\0\2\26\1\172\23\26\1\172\20\26\20\0"+
    "\1\26\6\0\1\173\23\26\1\173\22\26\20\0\1\26"+
    "\6\0\10\26\1\174\23\26\1\174\12\26\20\0\1\26"+
    "\6\0\16\26\1\175\23\26\1\175\4\26\20\0\1\26"+
    "\6\0\2\26\1\176\14\26\1\177\6\26\1\176\14\26"+
    "\1\177\3\26\20\0\1\26\6\0\1\200\20\26\1\201"+
    "\2\26\1\200\20\26\1\201\1\26\20\0\1\26\6\0"+
    "\15\26\1\202\23\26\1\202\5\26\20\0\1\26\6\0"+
    "\6\26\1\203\23\26\1\203\14\26\20\0\1\26\6\0"+
    "\21\26\1\204\23\26\1\204\1\26\20\0\1\26\6\0"+
    "\21\26\1\205\23\26\1\205\1\26\20\0\1\26\6\0"+
    "\17\26\1\206\23\26\1\206\3\26\20\0\1\26\6\0"+
    "\13\26\1\207\23\26\1\207\7\26\20\0\1\26\6\0"+
    "\4\26\1\210\23\26\1\210\16\26\20\0\1\26\6\0"+
    "\10\26\1\211\11\26\1\212\11\26\1\211\11\26\1\212"+
    "\20\0\1\26\6\0\17\26\1\211\23\26\1\211\3\26"+
    "\20\0\1\26\6\0\4\26\1\213\23\26\1\213\16\26"+
    "\20\0\1\26\6\0\2\26\1\214\23\26\1\214\20\26"+
    "\20\0\1\26\6\0\1\215\23\26\1\215\22\26\20\0"+
    "\1\26\6\0\13\26\1\216\23\26\1\216\7\26\20\0"+
    "\1\26\6\0\4\26\1\217\23\26\1\217\16\26\20\0"+
    "\1\26\6\0\7\26\1\220\23\26\1\220\13\26\20\0"+
    "\1\45\6\0\16\45\1\221\23\45\1\221\4\45\20\0"+
    "\1\45\6\0\2\45\1\222\23\45\1\222\20\45\20\0"+
    "\1\45\6\0\1\223\23\45\1\223\22\45\20\0\1\45"+
    "\6\0\10\45\1\224\23\45\1\224\12\45\20\0\1\45"+
    "\6\0\16\45\1\225\23\45\1\225\4\45\20\0\1\45"+
    "\6\0\2\45\1\226\14\45\1\227\6\45\1\226\14\45"+
    "\1\227\3\45\20\0\1\45\6\0\1\230\20\45\1\231"+
    "\2\45\1\230\20\45\1\231\1\45\20\0\1\45\6\0"+
    "\10\45\1\232\23\45\1\232\12\45\20\0\1\45\6\0"+
    "\15\45\1\233\23\45\1\233\5\45\20\0\1\45\6\0"+
    "\6\45\1\234\23\45\1\234\14\45\20\0\1\45\6\0"+
    "\21\45\1\235\23\45\1\235\1\45\20\0\1\45\6\0"+
    "\21\45\1\236\23\45\1\236\1\45\20\0\1\45\6\0"+
    "\17\45\1\237\23\45\1\237\3\45\20\0\1\45\6\0"+
    "\13\45\1\240\23\45\1\240\7\45\20\0\1\45\6\0"+
    "\4\45\1\241\23\45\1\241\16\45\20\0\1\45\6\0"+
    "\10\45\1\242\11\45\1\243\11\45\1\242\11\45\1\243"+
    "\20\0\1\45\6\0\17\45\1\242\23\45\1\242\3\45"+
    "\20\0\1\45\6\0\4\45\1\244\23\45\1\244\16\45"+
    "\20\0\1\45\6\0\2\45\1\245\23\45\1\245\20\45"+
    "\20\0\1\45\6\0\1\246\23\45\1\246\22\45\20\0"+
    "\1\45\6\0\13\45\1\247\23\45\1\247\7\45\20\0"+
    "\1\45\6\0\4\45\1\250\23\45\1\250\16\45\20\0"+
    "\1\45\6\0\20\45\1\251\23\45\1\251\2\45\20\0"+
    "\1\45\6\0\15\45\1\252\23\45\1\252\5\45\20\0"+
    "\1\45\6\0\7\45\1\253\23\45\1\253\13\45\20\0"+
    "\1\26\6\0\4\26\1\254\23\26\1\254\16\26\20\0"+
    "\1\26\6\0\10\26\1\255\23\26\1\255\12\26\20\0"+
    "\1\26\6\0\16\26\1\256\23\26\1\256\4\26\20\0"+
    "\1\26\6\0\13\26\1\257\23\26\1\257\7\26\20\0"+
    "\1\26\6\0\4\26\1\260\23\26\1\260\16\26\20\0"+
    "\1\26\6\0\1\261\23\26\1\261\22\26\20\0\1\26"+
    "\6\0\13\26\1\262\23\26\1\262\7\26\20\0\1\26"+
    "\6\0\2\26\1\263\23\26\1\263\20\26\20\0\1\26"+
    "\6\0\1\264\23\26\1\264\22\26\20\0\1\26\6\0"+
    "\4\26\1\265\23\26\1\265\16\26\20\0\1\26\6\0"+
    "\4\26\1\266\23\26\1\266\16\26\20\0\1\26\6\0"+
    "\13\26\1\267\23\26\1\267\7\26\20\0\1\26\6\0"+
    "\1\270\23\26\1\270\22\26\20\0\1\26\6\0\14\26"+
    "\1\271\23\26\1\271\6\26\20\0\1\26\6\0\12\26"+
    "\1\272\23\26\1\272\10\26\20\0\1\26\6\0\21\26"+
    "\1\273\23\26\1\273\1\26\20\0\1\26\6\0\7\26"+
    "\1\274\23\26\1\274\13\26\20\0\1\26\6\0\2\26"+
    "\1\275\23\26\1\275\20\26\20\0\1\26\6\0\10\26"+
    "\1\276\23\26\1\276\12\26\20\0\1\26\6\0\12\26"+
    "\1\277\23\26\1\277\10\26\20\0\1\26\6\0\10\26"+
    "\1\300\23\26\1\300\12\26\20\0\1\45\6\0\4\45"+
    "\1\301\23\45\1\301\16\45\20\0\1\45\6\0\10\45"+
    "\1\302\23\45\1\302\12\45\20\0\1\45\6\0\16\45"+
    "\1\303\23\45\1\303\4\45\20\0\1\45\6\0\13\45"+
    "\1\304\23\45\1\304\7\45\20\0\1\45\6\0\4\45"+
    "\1\305\23\45\1\305\16\45\20\0\1\45\6\0\1\306"+
    "\23\45\1\306\22\45\20\0\1\45\6\0\13\45\1\307"+
    "\23\45\1\307\7\45\20\0\1\45\6\0\2\45\1\310"+
    "\23\45\1\310\20\45\20\0\1\45\6\0\1\311\23\45"+
    "\1\311\22\45\20\0\1\45\6\0\16\45\1\312\23\45"+
    "\1\312\4\45\20\0\1\45\6\0\4\45\1\313\23\45"+
    "\1\313\16\45\20\0\1\45\6\0\4\45\1\314\23\45"+
    "\1\314\16\45\20\0\1\45\6\0\13\45\1\315\23\45"+
    "\1\315\7\45\20\0\1\45\6\0\1\316\23\45\1\316"+
    "\22\45\20\0\1\45\6\0\14\45\1\317\23\45\1\317"+
    "\6\45\20\0\1\45\6\0\12\45\1\320\23\45\1\320"+
    "\10\45\20\0\1\45\6\0\21\45\1\321\23\45\1\321"+
    "\1\45\20\0\1\45\6\0\7\45\1\322\23\45\1\322"+
    "\13\45\20\0\1\45\6\0\2\45\1\323\23\45\1\323"+
    "\20\45\20\0\1\45\6\0\10\45\1\324\23\45\1\324"+
    "\12\45\20\0\1\45\6\0\12\45\1\325\23\45\1\325"+
    "\10\45\20\0\1\45\6\0\4\45\1\326\23\45\1\326"+
    "\16\45\20\0\1\45\6\0\3\45\1\327\23\45\1\327"+
    "\17\45\20\0\1\45\6\0\10\45\1\330\23\45\1\330"+
    "\12\45\20\0\1\26\6\0\13\26\1\271\23\26\1\271"+
    "\7\26\20\0\1\26\6\0\4\26\1\331\11\26\1\331"+
    "\11\26\1\331\11\26\1\331\4\26\20\0\1\26\6\0"+
    "\2\26\1\332\23\26\1\332\20\26\20\0\1\26\6\0"+
    "\16\26\1\333\23\26\1\333\4\26\20\0\1\26\6\0"+
    "\12\26\1\334\23\26\1\334\10\26\20\0\1\26\6\0"+
    "\2\26\1\335\23\26\1\335\20\26\20\0\1\26\6\0"+
    "\3\26\1\336\23\26\1\336\17\26\20\0\1\26\6\0"+
    "\15\26\1\337\23\26\1\337\5\26\20\0\1\26\6\0"+
    "\7\26\1\340\23\26\1\340\13\26\20\0\1\26\6\0"+
    "\15\26\1\206\23\26\1\206\5\26\20\0\1\26\6\0"+
    "\17\26\1\341\23\26\1\341\3\26\20\0\1\26\6\0"+
    "\13\26\1\212\23\26\1\212\7\26\20\0\1\26\6\0"+
    "\2\26\1\276\23\26\1\276\20\26\20\0\1\26\6\0"+
    "\12\26\1\342\23\26\1\342\10\26\20\0\1\26\6\0"+
    "\4\26\1\343\23\26\1\343\16\26\20\0\1\45\6\0"+
    "\13\45\1\317\23\45\1\317\7\45\20\0\1\45\6\0"+
    "\4\45\1\344\11\45\1\344\11\45\1\344\11\45\1\344"+
    "\4\45\20\0\1\45\6\0\2\45\1\345\23\45\1\345"+
    "\20\45\20\0\1\45\6\0\16\45\1\346\23\45\1\346"+
    "\4\45\20\0\1\45\6\0\12\45\1\347\23\45\1\347"+
    "\10\45\20\0\1\45\6\0\2\45\1\350\23\45\1\350"+
    "\20\45\20\0\1\45\6\0\4\45\1\351\6\45\1\351"+
    "\14\45\1\351\6\45\1\351\7\45\20\0\1\45\6\0"+
    "\3\45\1\352\23\45\1\352\17\45\20\0\1\45\6\0"+
    "\15\45\1\353\23\45\1\353\5\45\20\0\1\45\6\0"+
    "\7\45\1\354\23\45\1\354\13\45\20\0\1\45\6\0"+
    "\15\45\1\237\23\45\1\237\5\45\20\0\1\45\6\0"+
    "\17\45\1\355\23\45\1\355\3\45\20\0\1\45\6\0"+
    "\13\45\1\243\23\45\1\243\7\45\20\0\1\45\6\0"+
    "\2\45\1\324\23\45\1\324\20\45\20\0\1\45\6\0"+
    "\12\45\1\356\23\45\1\356\10\45\20\0\1\45\6\0"+
    "\1\357\23\45\1\357\22\45\20\0\1\45\6\0\4\45"+
    "\1\360\23\45\1\360\16\45\20\0\1\26\6\0\13\26"+
    "\1\361\23\26\1\361\7\26\20\0\1\26\6\0\13\26"+
    "\1\254\23\26\1\254\7\26\20\0\1\26\6\0\2\26"+
    "\1\362\23\26\1\362\20\26\20\0\1\26\6\0\7\26"+
    "\1\363\23\26\1\363\13\26\20\0\1\26\6\0\1\364"+
    "\23\26\1\364\22\26\20\0\1\26\6\0\7\26\1\365"+
    "\23\26\1\365\13\26\20\0\1\26\6\0\3\26\1\366"+
    "\23\26\1\366\17\26\20\0\1\26\6\0\15\26\1\367"+
    "\23\26\1\367\5\26\20\0\1\26\6\0\4\26\1\263"+
    "\23\26\1\263\16\26\20\0\1\45\6\0\13\45\1\370"+
    "\23\45\1\370\7\45\20\0\1\45\6\0\13\45\1\301"+
    "\23\45\1\301\7\45\20\0\1\45\6\0\2\45\1\371"+
    "\23\45\1\371\20\45\20\0\1\45\6\0\7\45\1\372"+
    "\23\45\1\372\13\45\20\0\1\45\6\0\1\373\23\45"+
    "\1\373\22\45\20\0\1\45\6\0\7\45\1\374\23\45"+
    "\1\374\13\45\20\0\1\45\6\0\3\45\1\375\23\45"+
    "\1\375\17\45\20\0\1\45\6\0\15\45\1\376\23\45"+
    "\1\376\5\45\20\0\1\45\6\0\4\45\1\310\23\45"+
    "\1\310\16\45\20\0\1\45\6\0\3\45\1\377\23\45"+
    "\1\377\17\45\20\0\1\26\6\0\12\26\1\u0100\23\26"+
    "\1\u0100\10\26\20\0\1\26\6\0\4\26\1\u0101\23\26"+
    "\1\u0101\16\26\20\0\1\26\6\0\13\26\1\366\23\26"+
    "\1\366\7\26\20\0\1\26\6\0\17\26\1\u0102\23\26"+
    "\1\u0102\3\26\20\0\1\26\6\0\1\u0103\23\26\1\u0103"+
    "\22\26\20\0\1\45\6\0\12\45\1\u0104\23\45\1\u0104"+
    "\10\45\20\0\1\45\6\0\4\45\1\u0105\23\45\1\u0105"+
    "\16\45\20\0\1\45\6\0\13\45\1\375\23\45\1\375"+
    "\7\45\20\0\1\45\6\0\17\45\1\u0106\23\45\1\u0106"+
    "\3\45\20\0\1\45\6\0\1\u0107\23\45\1\u0107\22\45"+
    "\20\0\1\45\6\0\4\45\1\u0108\23\45\1\u0108\16\45"+
    "\20\0\1\26\6\0\17\26\1\u0109\23\26\1\u0109\3\26"+
    "\20\0\1\26\6\0\16\26\1\277\23\26\1\277\4\26"+
    "\20\0\1\26\6\0\16\26\1\364\23\26\1\364\4\26"+
    "\20\0\1\26\6\0\16\26\1\343\23\26\1\343\4\26"+
    "\20\0\1\45\6\0\17\45\1\u010a\23\45\1\u010a\3\45"+
    "\20\0\1\45\6\0\16\45\1\325\23\45\1\325\4\45"+
    "\20\0\1\45\6\0\16\45\1\373\23\45\1\373\4\45"+
    "\20\0\1\45\6\0\16\45\1\360\23\45\1\360\4\45"+
    "\20\0\1\45\6\0\15\45\1\u010b\23\45\1\u010b\5\45"+
    "\20\0\1\26\6\0\15\26\1\u010c\23\26\1\u010c\5\26"+
    "\20\0\1\45\6\0\15\45\1\u010d\23\45\1\u010d\5\45"+
    "\20\0\1\45\6\0\13\45\1\326\23\45\1\326\7\45"+
    "\20\0\1\26\6\0\1\u010e\23\26\1\u010e\22\26\20\0"+
    "\1\45\6\0\1\u010f\23\45\1\u010f\22\45\20\0\1\26"+
    "\6\0\15\26\1\u0110\23\26\1\u0110\5\26\20\0\1\45"+
    "\6\0\15\45\1\u0111\23\45\1\u0111\5\45\20\0\1\26"+
    "\6\0\7\26\1\u0112\23\26\1\u0112\13\26\20\0\1\45"+
    "\6\0\7\45\1\u0113\23\45\1\u0113\13\45\20\0\1\26"+
    "\6\0\13\26\1\260\23\26\1\260\7\26\20\0\1\45"+
    "\6\0\13\45\1\305\23\45\1\305\7\45\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13454];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\2\11\2\1\1\11\37\1\7\11\1\1\2\11"+
    "\1\1\3\11\65\1\1\11\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    private AbstractSymbol filename;
    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }
    AbstractSymbol curr_filename() {
	return filename;
    }
    //Codigo creado ademas de la estructura establecida
    //variables cadena
    Boolean errorCadenaTamanio=false;
    Boolean errorCadenaNull=false;
    Boolean hayErrorCadena=false;
    Boolean existeDiagonalInversa=false;
    //metodo para reiniciar error
    void reiniciarErrorCadenaTamanio(){
        errorCadenaTamanio=false;
    }
    void reiniciarErrorCadenaNull(){
        errorCadenaNull=false;
    }
    void reiniciarExisteDiagonalInversa(){
        existeDiagonalInversa=false;
    }
    void hayErrorCadena(){
        hayErrorCadena=false;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CoolLexer(java.io.Reader in) {
  
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     //estados posibles
    switch(zzLexicalState) {
        //estado inicial no pasa nada
        case YYINITIAL:
        /* nada */
        break;
        //estado string, significa que no finalizo bien la cadena
        case STRING:
            yybegin(YYINITIAL);//nos movemos a yyinitial
            return new Symbol(TokenConstants.ERROR,"EOF in string constant");
        //estado multi comentario, significa que no finalizo bien el comentario
        case MULTI_COMMENTARIO:
            yybegin(YYINITIAL);//nos movemos a yyinitial
            return new Symbol(TokenConstants.ERROR,"EOF in multi-line comment");
    }//retornamos
    return new Symbol(TokenConstants.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(TokenConstants.ERROR,yytext());
            }
            // fall through
          case 53: break;
          case 2:
            { /* No hacer nada xd */
            }
            // fall through
          case 54: break;
          case 3:
            { curr_lineno++;
            }
            // fall through
          case 55: break;
          case 4:
            { string_buf.setLength(0);reiniciarErrorCadenaTamanio();
                  reiniciarErrorCadenaNull();reiniciarExisteDiagonalInversa();hayErrorCadena();
                  yybegin(STRING);
            }
            // fall through
          case 56: break;
          case 5:
            { return new Symbol(TokenConstants.LPAREN);
            }
            // fall through
          case 57: break;
          case 6:
            { return new Symbol(TokenConstants.RPAREN);
            }
            // fall through
          case 58: break;
          case 7:
            { return new Symbol(TokenConstants.MULT);
            }
            // fall through
          case 59: break;
          case 8:
            { return new Symbol(TokenConstants.PLUS);
            }
            // fall through
          case 60: break;
          case 9:
            { return new Symbol(TokenConstants.COMMA);
            }
            // fall through
          case 61: break;
          case 10:
            { return new Symbol(TokenConstants.MINUS);
            }
            // fall through
          case 62: break;
          case 11:
            { return new Symbol(TokenConstants.DOT);
            }
            // fall through
          case 63: break;
          case 12:
            { return new Symbol(TokenConstants.DIV);
            }
            // fall through
          case 64: break;
          case 13:
            { AbstractSymbol num = AbstractTable.inttable.addInt(Integer.parseInt(yytext()));
                    return new Symbol(TokenConstants.INT_CONST,num);
            }
            // fall through
          case 65: break;
          case 14:
            { return new Symbol(TokenConstants.COLON);
            }
            // fall through
          case 66: break;
          case 15:
            { return new Symbol(TokenConstants.SEMI);
            }
            // fall through
          case 67: break;
          case 16:
            { return new Symbol(TokenConstants.LT);
            }
            // fall through
          case 68: break;
          case 17:
            { return new Symbol(TokenConstants.EQ);
            }
            // fall through
          case 69: break;
          case 18:
            { return new Symbol(TokenConstants.AT);
            }
            // fall through
          case 70: break;
          case 19:
            { AbstractSymbol idType=AbstractTable.idtable.addString(yytext());
                                return new Symbol(TokenConstants.TYPEID,idType);
            }
            // fall through
          case 71: break;
          case 20:
            { AbstractSymbol idObject=AbstractTable.idtable.addString(yytext());
                                return new Symbol(TokenConstants.OBJECTID,idObject);
            }
            // fall through
          case 72: break;
          case 21:
            { return new Symbol(TokenConstants.LBRACE);
            }
            // fall through
          case 73: break;
          case 22:
            { return new Symbol(TokenConstants.RBRACE);
            }
            // fall through
          case 74: break;
          case 23:
            { return new Symbol(TokenConstants.NEG);
            }
            // fall through
          case 75: break;
          case 24:
            { if((!errorCadenaTamanio)&&(!errorCadenaNull)){//si no se ha encontrado error de tamaño y null
if(yytext().charAt(0)=='\0'){//tenemos error de caracter nulo si encuentra \0
    errorCadenaNull=true;
    hayErrorCadena=true;
}else{
    if(string_buf.length()>0){//si ya se ha escrito algo en el buffer
        int menosUno=string_buf.length()-1;
        char caracterMenor=string_buf.charAt(menosUno);//obtenemos el ultimo caracter escrito
        if(caracterMenor=='\\'&&(!errorCadenaNull)){//si el ultimo caracter escrito es \
            char chars=yytext().charAt(0);
            //Listado de caracteres siguientes
            if(chars=='b'||chars=='t'||chars=='n'||chars=='f'||chars=='\\'){
                if(chars=='b'){
                    string_buf.setCharAt(menosUno, '\b');
                }else if(chars=='t'){
                    string_buf.setCharAt(menosUno, '\t');
                }else if(chars=='n'){
                    string_buf.setCharAt(menosUno, '\n');
                }else if(chars=='f'){
                    string_buf.setCharAt(menosUno, '\f');
                }else if(chars=='\\'){
                     string_buf.setCharAt(menosUno, chars);
                     existeDiagonalInversa=true;//se vuelve verdadero porque se ha encontrado diagonal inversa,es caracter diagonal
                }
            }else{
                string_buf.setCharAt(menosUno, chars);
            }
        }else{//si no es \
            if(yytext().charAt(0) == '\\') {
                existeDiagonalInversa = false;//no caracter diagonal
            }
            string_buf.append(yytext());//anadimos el caracter que viene
        }
    }else{
        string_buf.append(yytext());//anadimos el caracter que viene
    }
    if(string_buf.length() >= MAX_STR_CONST) {
        hayErrorCadena=true;
        errorCadenaTamanio = true;
    }
}
}
            }
            // fall through
          case 76: break;
          case 25:
            { curr_lineno++;//aumentamos linea
if(string_buf.length()!= 0) {
    int menor=string_buf.length()-1;
    char caracterMenor = string_buf.charAt(menor);
    if(caracterMenor == '\\' && (!existeDiagonalInversa)) {//si viene el caracter anterior y no es \\, entonces viene \, por lo tanto podemos hacer salto de linea
        string_buf.setCharAt(menor, '\n');
    } else { // no se puede dar salto de linea
        hayErrorCadena=true;
        return new Symbol(TokenConstants.ERROR, "Unterminated string constant");
    }
} else {//ni tenemos que analizar si primero hay salto de linea, significa que no hay una diagonal inversa
    hayErrorCadena=true;
    return new Symbol(TokenConstants.ERROR, "Unterminated string constant");
}
            }
            // fall through
          case 77: break;
          case 26:
            { /*si es el caracter anterior es \ y luego viene " significa que volvemos caracter \" igual a "
verificamos caracter \ anterior, que no haya sido que sea falso \\ por que si es verdadero entonces tenemos el caracter en si
y no podemos agregar el caracter " , obviamente seria si fuera mayor a 0 la cantidad, si no es en vano.
*/
//Orden establecido para que no tenga fallos en analizar, si se pusiera string buff lengt -1 antes de comprobar que sea mayor, daria error
if((!existeDiagonalInversa) && (string_buf.length()>0)&&(string_buf.charAt(string_buf.length()-1) == '\\')) {
        string_buf.setCharAt(string_buf.length()-1,'\"');//cambiamos \ por "
} else {
        //verificamos si no hay un error, los return van de ultimo
        yybegin(YYINITIAL);
        if(errorCadenaNull) {
            return new Symbol(TokenConstants.ERROR, new String("String contains null character"));
        }if(errorCadenaTamanio) {
            return new Symbol(TokenConstants.ERROR, new String("String constant too long"));
        }if(!hayErrorCadena){
            AbstractSymbol string = AbstractTable.stringtable.addString(string_buf.toString());
            return new Symbol(TokenConstants.STR_CONST, string);
        }
    }
            }
            // fall through
          case 78: break;
          case 27:
            { /*nada*/
            }
            // fall through
          case 79: break;
          case 28:
            { yybegin(MULTI_COMMENTARIO);
            }
            // fall through
          case 80: break;
          case 29:
            { return new Symbol(TokenConstants.ERROR, "Unmatched *)");
            }
            // fall through
          case 81: break;
          case 30:
            { return new Symbol(TokenConstants.ASSIGN);
            }
            // fall through
          case 82: break;
          case 31:
            { return new Symbol(TokenConstants.LE);
            }
            // fall through
          case 83: break;
          case 32:
            { return new Symbol(TokenConstants.DARROW);
            }
            // fall through
          case 84: break;
          case 33:
            { return new Symbol(TokenConstants.OF);
            }
            // fall through
          case 85: break;
          case 34:
            { return new Symbol(TokenConstants.IN);
            }
            // fall through
          case 86: break;
          case 35:
            { return new Symbol(TokenConstants.FI);
            }
            // fall through
          case 87: break;
          case 36:
            { return new Symbol(TokenConstants.IF);
            }
            // fall through
          case 88: break;
          case 37:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 89: break;
          case 38:
            { return new Symbol(TokenConstants.LET);
            }
            // fall through
          case 90: break;
          case 39:
            { return new Symbol(TokenConstants.NOT);
            }
            // fall through
          case 91: break;
          case 40:
            { return new Symbol(TokenConstants.NEW);
            }
            // fall through
          case 92: break;
          case 41:
            { return new Symbol(TokenConstants.CASE);
            }
            // fall through
          case 93: break;
          case 42:
            { return new Symbol(TokenConstants.ELSE);
            }
            // fall through
          case 94: break;
          case 43:
            { return new Symbol(TokenConstants.ESAC);
            }
            // fall through
          case 95: break;
          case 44:
            { return new Symbol(TokenConstants.LOOP);
            }
            // fall through
          case 96: break;
          case 45:
            { return new Symbol(TokenConstants.POOL);
            }
            // fall through
          case 97: break;
          case 46:
            { return new Symbol(TokenConstants.THEN);
            }
            // fall through
          case 98: break;
          case 47:
            { return new Symbol(TokenConstants.BOOL_CONST,true);
            }
            // fall through
          case 99: break;
          case 48:
            { return new Symbol(TokenConstants.CLASS);
            }
            // fall through
          case 100: break;
          case 49:
            { return new Symbol(TokenConstants.WHILE);
            }
            // fall through
          case 101: break;
          case 50:
            { return new Symbol(TokenConstants.BOOL_CONST,false);
            }
            // fall through
          case 102: break;
          case 51:
            { return new Symbol(TokenConstants.INHERITS);
            }
            // fall through
          case 103: break;
          case 52:
            { return new Symbol(TokenConstants.ISVOID);
            }
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
